<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!-- Generated Nov 7, 2016 4:37:40 PM by Hibernate Tools 4.3.1 -->
<hibernate-mapping>
    <class name="entities.UserInfo" table="user_info" catalog="gifme" optimistic-lock="version">
        <id name="usrId" type="java.lang.Integer">
            <column name="USR_ID" />
            <generator class="identity" />
        </id>
        <property name="usrName" type="string">
            <column name="USR_NAME" />
        </property>
        <property name="usrNickname" type="string">
            <column name="USR_NICKNAME" />
        </property>
        <property name="usrDesc" type="string">
            <column name="USR_DESC" />
        </property>
        <property name="usrPhotoUri" type="string">
            <column name="USR_PHOTO_URI" />
        </property>
        <property name="usrEmail" type="string">
            <column name="USR_EMAIL" />
        </property>
        <property name="usrLoginType" type="java.lang.Integer">
            <column name="USR_LOGIN_TYPE">
                <comment>0:local account; 1:twitter account;</comment>
            </column>
        </property>
        <property name="usrAccountStatus" type="java.lang.Integer">
            <column name="USR_ACCOUNT_STATUS">
                <comment>ACCOUNT STATUS(NORMAL: 0/FROZEN:1)</comment>
            </column>
        </property>
        <one-to-one name="adminAccountFrozenLog" class="entities.AdminAccountFrozenLog"></one-to-one>
        <set name="followsesForFollowerId" table="follows" inverse="true" lazy="true" fetch="select">
            <key>
                <column name="FOLLOWER_ID" not-null="true">
                    <comment>USER'S FOLLOWERS</comment>
                </column>
            </key>
            <one-to-many class="entities.Follows" />
        </set>
        <set name="adminCommentReviewLogs" table="admin_comment_review_log" inverse="true" lazy="true" fetch="select">
            <key>
                <column name="ADC_COMMENT_USER_ID" />
            </key>
            <one-to-many class="entities.AdminCommentReviewLog" />
        </set>
        <set name="adminMomentsReviewLogs" table="admin_moments_review_log" inverse="true" lazy="true" fetch="select">
            <key>
                <column name="ADM_MOMENT_USER_ID" />
            </key>
            <one-to-many class="entities.AdminMomentsReviewLog" />
        </set>
        <one-to-one name="followsByUsrId" class="entities.Follows"></one-to-one>
        <set name="likeses" table="likes" inverse="true" lazy="true" fetch="select">
            <key>
                <column name="LIK_USR_ID" />
            </key>
            <one-to-many class="entities.Likes" />
        </set>
        <set name="commentses" table="comments" inverse="true" lazy="true" fetch="select">
            <key>
                <column name="COMT_USR_ID" />
            </key>
            <one-to-many class="entities.Comments" />
        </set>
        <set name="momentses" table="moments" inverse="true" lazy="true" fetch="select">
            <key>
                <column name="MOT_USR_ID" />
            </key>
            <one-to-many class="entities.Moments" />
        </set>
        <set name="groupMemberses" table="group_members" inverse="true" lazy="true" fetch="select">
            <key>
                <column name="GPM_USR_ID" />
            </key>
            <one-to-many class="entities.GroupMembers" />
        </set>
        <one-to-one name="userPassword" class="entities.UserPassword"></one-to-one>
    </class>
</hibernate-mapping>
